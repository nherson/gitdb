#!/bin/bash
BIN_PATH=$(dirname $0)
LIB_PATH=$BIN_PATH/../lib
ETC_PATH=$BIN_PATH/../etc

# Things done here:
#   0. Source the config
#   1. Source the needed functions from the library
#   2. Clone the repo containing the DB
#   3. Move execution into the working directory of the DB (for ease of coding)
setup() {
  echo "Starting GitDB..."
  echo -n "Loading configuration..."
  . $ROOT/../etc/gitdb.conf
  echo "Done."
  echo -n "Sourcing libraries..."
  for lib in $(find ../lib -maxdepth 1 -mindepth 1); do
    . $lib
  done
  echo "Done."
  echo -n "Cloning the DB repo into $LOCAL_LOCATION"
  cd $LOCAL_LOCATION
  git clone $REPO_LOCATION gitdb-repo
  cd gitdb-repo
}

commit() {
  git add -A
  git commit -m "a commit to the db"
  if git pull; then
    if git push origin master; then
      return 0
    else
      return 1
    fi
  fi
  return 1
}

display_schema() {
  echo "TABLE: FIELD,NAMES (comma separated)"
  for table in $(find * -maxdepth 1 -type f -print); do
    echo -n "$table: "
    echo $(cat $table | head -n 1)
  done
}

cleanup() {
  rm -rf $LOCAL_LOCATION/gitdb-repo
}

main() {
  setup
  echo "Welcome to GitDB"
  while true; do
    #main input loop    
    echo -n "GitDB> "
    read input
    if [ "$input" = "quit" ]; then
      break
    fi
    execute_command $input
  done
  cleanup
}

execute_command() {
  action=$*
  case $arg in
    create)
      while : ; do
        git pull
        if ! create_table $(echo $input | cut -f2 -d' ') $(echo $input | cut -f3 -d' '); then
          break
        fi
        ! commit || git reset --hard && break
      done
      ;;
    read)
      git pull
      read_records $(echo $input | cut -f2 -d' ')
      ;;
    insert)
      table=$(echo $input | cut -f2 -d' ')
      record=$(echo $input | cut -f3 -d' ')
      git pull
      while : ; do
        git pull
        if ! insert_record $table $record; then
          break
        fi
        if commit; then
          break
        else
          git reset --hard origin/master
        fi
      done
      ;;
    drop)
      table=$(echo $input | cut -f2 -d' ')
      while : ; do
        git pull
        if ! drop_table $table; then
          break
        fi
        if commit; then
          break
        else
          git reset --hard origin/master
        fi
      done
      ;;
    delete)
      table=$(echo $input | cut -f2 -d' ')
      record=$(echo $input | cut -f3 -d' ')
      while : ; do
        git pull
        if ! delete_records $table $record; then
          break
        fi
        if commit; then
          break
        else
          git reset --hard origin/master
        fi
      done
      ;;
    schema)
      display_schema
      ;;
    quit)
      cleanup
      exit 0
      ;;
    *)
      echo "Unknown action: $arg"
      ;;
  esac
}

# start it all up
main
